name: Create Release on Plugin File Change

on:
  push:
    branches:
      - main

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for git diff

      # Step 2: Determine if relevant files were changed
      - name: Check if relevant files were changed
        id: files_changed
        run: |
          # Define the paths to monitor
          FILE_PATTERNS=("ba-wordpress-github-updater-plugin/**/*.php")
      
          # Initialize a flag
          CHANGED=false
      
          # Get list of changed files in the push
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
      
          echo "Changed files in this push:"
          echo "$CHANGED_FILES"
      
          # Check if any of the monitored files are in the list
          for pattern in "${FILE_PATTERNS[@]}"; do
            # Escape dots and replace '*' with '.*' for regex
            regex="^${pattern//./\\.}"
            regex="^${regex//\*\*/.*/}"  # Handle '**' for recursive directories
            regex="^${regex//\*/[^/]*}"   # Handle '*' for single directory levels
      
            if echo "$CHANGED_FILES" | grep -E "$regex" ; then
              CHANGED=true
              break
            fi
          done
      
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      # Step 3: Extract Version from main plugin file
      - name: Extract Version from Plugin File
        id: extract_version
        if: steps.files_changed.outputs.changed == 'true'
        run: |
          # Define the plugin main file path
          PLUGIN_FILE="index.php" # Adjust as per your main plugin file

          # Extract the version using grep and regex
          VERSION_LINE=$(grep -i "^Version:" "$PLUGIN_FILE" || true)

          if [ -z "$VERSION_LINE" ]; then
            echo "Version line not found in $PLUGIN_FILE"
            exit 1
          fi

          # Extract the version number (assuming format "Version: x.y.z")
          VERSION=$(echo "$VERSION_LINE" | sed -E 's/Version:[[:space:]]*//I')

          if [ -z "$VERSION" ]; then
            echo "Version number not found in $PLUGIN_FILE"
            exit 1
          fi

          echo "Extracted version: $VERSION"

          # Set the version as an output variable
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Step 4: Create GitHub Release
      - name: Create GitHub Release
        if: steps.files_changed.outputs.changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET_GITHUB_TOKEN }}
        with:
          # Use the extracted version as the tag name
          tag_name: "v${{ steps.extract_version.outputs.version }}"
          # Use the extracted version as the release name
          release_name: "Release v${{ steps.extract_version.outputs.version }}"
          # Optionally, generate release notes or customize as needed
          body: |
            A new release has been created based on updates to the plugin files.

            **Version:** v${{ steps.extract_version.outputs.version }}

            ## Changes
            - Detailed changelog can be added here.

          draft: false
          prerelease: false
